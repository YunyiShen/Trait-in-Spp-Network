link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_outer = matrix(0,n_grids^2,1)
spp_mat = matrix(1,2,2)
diag(spp_mat)=0
spp_mat = as(spp_mat,'dsCMatrix')
envX = matrix(1,n_grids^2,1)
envX = cbind(envX ,rnorm(n_grids^2))
nrep = 1
nspp = 5
nsite = n_grid^2
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,-.5,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_neig = matrix(1,5,5)
diag(spp_neig)=0
spp_neig = matrix(1,5,5)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
spp_mat_2 = matrix(runif(nspp^2,-.5,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_mat_2
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_mat_2
spp_eign
spp_neig
theta = list(beta_occu = runif(10,-1,1),
beta_graph = c(.3,-.3),
eta_intra = c(0.1,0.1),
eta_inter = c(0,0))
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1] + spp_design[[2]]*theta$beta_graph[2]
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1] + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM_full = 0*link_map[[1]],link_map,link_mainland, link_mainland = link_mainland ,
int_range_intra="nn",int_range_inter="nn")
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland, link_mainland = link_mainland ,
int_range_intra="nn",int_range_inter="nn")
spp_neig = matrix(1,5,5)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
envX = matrix(1,n_grids^2,1)
envX = cbind(envX ,rnorm(n_grids^2))
theta = list(beta_occu = runif(10,-1,1),
beta_graph = c(.3,-.3),
eta_intra = c(0.1,0.1),
eta_inter = c(0,0))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nrep = 1
nspp = 5
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1] + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland, link_mainland = link_mainland ,
int_range_intra="nn",int_range_inter="nn")
link_map[[1]]
link_map[[2]]
## generate graph
n_grids = 15 # 15 by 15 grid system
link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_inner
link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_outer = link_inner
spp_neig = matrix(1,5,5)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
envX = matrix(1,n_grids^2,1)
envX = cbind(envX ,rnorm(n_grids^2))
theta = list(beta_occu = runif(10,-1,1),
beta_graph = c(.3,-.3),
eta_intra = c(0.1,0.1),
eta_inter = c(0,0))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nrep = 1
nspp = 5
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1] + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = link_mainland ,
int_range_intra="nn",int_range_inter="nn")
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
MRF$A
MRF$A@i
MRF$A
MRF$thr
envX
theta$spp_mat
theta = list(beta_occu = runif(10,-1,1),
beta_graph = c(.3,-1),
eta_intra = rep(0,5),
eta_inter = rep(0,5))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nrep = 1
nspp = 5
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1] + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
Z_simu
Z_simu[1]
Z_simu[2]
Z_simu[3]
Z_simu[5]
sum(Z_simu)
as.matrix(Z_simu,nrow=5)
View(Z_simu)
ww = as.matrix(Z_simu,nrow=5)
cor(ww)
ww = matrix(Z_simu,nrow=5)
ww
cor(t(ww))
spp_mat_2
theta$spp_mat
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
ww = matrix(Z_simu,nrow=5)
ww = matrix(Z_simu,ncol=5)
cor((ww))
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, Zprop_rate = 1
, uni_prior = F
, distM=distM_full,link_map=link_map
, dist_mainland =  distM_mainland , link_mainland =  link_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=distM_full,link_map=link_map
, dist_mainland =  distM_mainland , link_mainland =  link_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
vars_prop = list( beta_occu = c(5e-3,5e-3)
,beta_graph = 5e-3 # no extra det thing
,eta_intra = rep(1e-3,nspp)
,eta_inter = c(5e-3,5e-3))
para_prior = list( beta_occu = rep(1000,2 * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=distM_full,link_map=link_map
, dist_mainland =  distM_mainland , link_mainland =  link_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = dist_mainland , link_mainland =  dist_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = dist_mainland , link_mainland =  dist_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
source("./R/Main_Sampler.R")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = dist_mainland , link_mainland =  dist_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
source("./R/Main_Sampler.R")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = dist_mainland , link_mainland =  dist_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
source("./R/Main_Sampler.R")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
(length(theta_curr)-1)
theta_curr
theta_prop$spp_mat
source("./R/misc.R")
source("./R/Main_Sampler.R")
source("./R/Simu_data_Sampling.R")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 100,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 50000, burn.in = 5000
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 30,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 10,report.by = 30,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
vars_prop = list( beta_occu = 5e-3
,beta_graph = 5e-3 # no extra det thing
,eta_intra = rep(1e-3,nspp)
,eta_inter = c(5e-3,5e-3))
vars_prop = list( beta_occu = 5e-3
,beta_graph = 5e-3 # no extra det thing
,eta_intra = rep(1e-3,nspp)
,eta_inter = c(5e-3,5e-3))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
vars_prop = list( beta_occu = 5e-3
,beta_graph = 5e-5 # no extra det thing
,eta_intra = rep(1e-3,nspp)
,eta_inter = c(5e-3,5e-3))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
plot(kk$theta.mcmc$beta_graph[,1])
plot(kk$theta.mcmc$beta_graph[,2])
plot(kk$theta.mcmc$beta_graph[,1])
plot(kk$theta.mcmc$spp_mat[,1])
plot(kk$theta.mcmc$spp_mat[,2])
plot(kk$theta.mcmc$spp_mat[,3])
plot(kk$theta.mcmc$spp_mat[,4])
plot(kk$theta.mcmc$spp_mat[,5])
plot(kk$theta.mcmc$spp_mat[,6])
plot(kk$theta.mcmc$spp_mat[,7])
plot(kk$theta.mcmc$spp_mat[,8])
spp_design
hist(spp_design[[2]])
hist(matrix( spp_design[[2]]))
plot(kk$theta.mcmc$eta_intra[,1])
plot(kk$theta.mcmc$eta_intra[,2])
plot(kk$theta.mcmc$eta_intra[,3])
plot(kk$theta.mcmc$eta_intra[,4])
## generate graph
n_grids = 15 # 15 by 15 grid system
link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_outer = link_inner
spp_neig = matrix(1,5,5)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
spp_neig = matrix(1,2,2)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
envX = matrix(1,n_grids^2,1)
envX = cbind(envX ,rnorm(n_grids^2))
theta = list(beta_occu = rnorm(2,-1,1),
beta_graph = c(.3),
eta_intra = rep(0,2),
eta_inter = rep(0,2))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nrep = 1
nspp = 2
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig)#,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1]# + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
vars_prop = list( beta_occu = 5e-3
,beta_graph = 5e-5 # no extra det thing
,eta_intra = rep(1e-3,nspp)
,eta_inter = c(5e-3,5e-3))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
ini$spp_mat
theta_prop$spp_mat
www = matrix(Z_temp,ncol=2)
cor(www)
View(Z_temp)
dist_mainland
link_mainland
sum(is.na(MRF_prop$thr))
MRF_prop = getMRF(theta_prop,envX,distM,link_map,dist_mainland,link_mainland,int_range_intra,int_range_inter)
sum(is.na(A))
View(thr)
i=2
envX %*% beta_occu[1:ncol(envX)+(i-1)*ncol(envX)] +
mainland_thr(dist_mainland,link_mainland,eta_inter[i],d_inter[i],int_range_inter)
beta_occu[1:ncol(envX)+(i-1)*ncol(envX)]
theta = list(beta_occu = rnorm(4,-1,1),
beta_graph = c(.3),
eta_intra = rep(0,2),
eta_inter = rep(0,2))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nrep = 1
nspp = 2
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig)#,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1]# + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
beta_occu[1:ncol(envX)+(i-1)*ncol(envX)]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
vars_prop = list( beta_occu = 5e-3
,beta_graph = 5e-5 # no extra det thing
,eta_intra = rep(1e-3,nspp)
,eta_inter = c(5e-3,5e-3))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
plot(kk$theta.mcmc$spp_mat[,2])
plot(kk$theta.mcmc$beta_occu[,1])
theta$beta_occu
plot(kk$theta.mcmc$beta_occu[,2])
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
theta_prop$spp_mat
View(MRF_prop$A)
(MRF_prop$A)
(MRF_prop$A[226:260,1:4])
