envX = matrix(1,n_grids^2,1)
envX = cbind(envX ,rnorm(n_grids^2))
theta = list(beta_occu = rnorm(4,0,1),
beta_graph = c(.3),
eta_intra = rep(0,2),
eta_inter = rep(0,2))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nrep = 1
nspp = 2
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig)#,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1]# + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
vars_prop = list( beta_occu = 5e-10
,beta_graph = 5e-10 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
plot(kk$theta.mcmc$beta_graph[,1])
plot(kk$theta.mcmc$beta_graph[,2])
source("./R/misc.R")
source("./R/Main_Sampler.R")
source("./R/Simu_data_Sampling.R")
require(Matrix)
require(Rcpp)
Rcpp::sourceCpp("src/IsingCpp_CFTP_sparse.cpp")
## generate graph
n_grids = 12 # 15 by 15 grid system
link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_outer = link_inner
spp_neig = matrix(1,2,2)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
envX = matrix(1,n_grids^2,1)
theta = list(beta_occu = rep(0,2),
beta_graph = c(.3),
eta_intra = rep(0,2),
eta_inter = rep(0,2))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nrep = 1
nspp = 2
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig)#,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1]# + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
MRF$thr
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
hist(Z_simu)
cor(matrix(Z_simu,ncol=2))
vars_prop = list( beta_occu = 5e-10
,beta_graph = 5e-10 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
View(Murray_ratio_occu_theta)
kk = Net.fit.Murray.sampler(Z =Z_simu, X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
hist(Z_temp)
Z
hist(Z)
spp_mat_temp
Hamiltonian(MRF_prop,Z )
Z
Z_simu
kk = Net.fit.Murray.sampler(Z = t(Z_simu), X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
vars_prop = list( beta_occu = 5e-5
,beta_graph = 5e-5 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
kk = Net.fit.Murray.sampler(Z = t(Z_simu), X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
vars_prop = list( beta_occu = 5e-3
,beta_graph = 5e-3 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z = t(Z_simu), X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
plot(kk$theta.mcmc$beta_graph[,1])
source("./R/misc.R")
source("./R/Main_Sampler.R")
source("./R/Simu_data_Sampling.R")
require(Matrix)
require(Rcpp)
## generate graph
n_grids = 12 # 15 by 15 grid system
link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_outer = link_inner
## generate graph
n_grids = 15 # 15 by 15 grid system
link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_outer = link_inner
###### True Parameter Setting ######
nspp = 5
spp_neig = matrix(1,nspp,nspp)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
envX = matrix(1,n_grids^2,1)
envX = cbind(envX ,rnorm(n_grids^2))
theta = list(beta_occu = runif(nspp*ncol(envX),-1,1),
beta_graph = c(.3,-.5),
eta_intra = rep(0,nspp),
eta_inter = rep(0,nspp))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1]# + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
vars_prop = list( beta_occu = 5e-3
,beta_graph = 5e-3 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z = t(Z_simu), X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
vars_prop = list( beta_occu = 5e-4
,beta_graph = 5e-4 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z = t(Z_simu), X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
plot(kk$theta.mcmc$beta_graph[,1])
plot(kk$theta.mcmc$beta_graph[,2])
plot(kk$theta.mcmc$beta_graph[,1])
plot(kk$theta.mcmc$beta_graph[,2])
## generate graph
n_grids = 15 # 15 by 15 grid system
link_inner = adjacency.matrix(n_grids) # nearest neighborhood
link_outer = link_inner
###### True Parameter Setting ######
nspp = 5
spp_neig = matrix(1,nspp,nspp)
diag(spp_neig)=0
spp_neig = as(spp_neig,'dsCMatrix')
envX = matrix(1,n_grids^2,1)
envX = cbind(envX ,rnorm(n_grids^2))
theta = list(beta_occu = runif(nspp*ncol(envX),-1,1),
beta_graph = c(.3,-.5),
eta_intra = rep(0,nspp),
eta_inter = rep(0,nspp))
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nsite = n_grids^2
distM_mainland = matrix(0,nsite,1)
spp_mat_2 = matrix(runif(nspp^2,0,.5),nspp,nspp)
spp_mat_2 = spp_neig * (spp_mat_2 + t(spp_mat_2))
spp_design  = list(spp_neig,spp_mat_2)
theta$spp_mat = spp_design[[1]]*theta$beta_graph[1] + spp_design[[2]]*theta$beta_graph[2]
###### Simulate Data ######
set.seed(42)
MRF = getMRF(theta,envX,distM = 0*link_map[[1]],link_map,link_mainland = distM_mainland, dist_mainland = distM_mainland ,
int_range_intra="nn",int_range_inter="nn")
Z_simu = IsingSamplerCpp(1, MRF$A, MRF$thr, 1, 30, c(-1,1), F,NA+MRF$thr) ## take true occupancy
vars_prop = list( beta_occu = 5e-4
,beta_graph = 5e-4 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z = t(Z_simu), X = envX, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]]+1,link_map=link_map
, dist_mainland = distM_mainland+1 , link_mainland =  distM_mainland +1
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
plot(kk$theta.mcmc$beta_graph[,1])
plot(kk$theta.mcmc$beta_graph[,2])
sum(kk$theta.mcmc$beta_graph[,2]<-0.5)
sum(kk$theta.mcmc$beta_graph[,2]<=-0.5)
kk$theta.mcmc$beta_graph[,2]
3.5+6
9/5/2
1.7/2
9.5/2
6.4+18.3
24.7/2
Bodysize_mat = Bodysize %*% matrix(1,6,1) - matrix(1,1,6) %*% t(Bodysize)
# fisher marten coyote red_fox gray_fox bobcat in kg, male
Bodysize = c(4.75,0.85,12.5,8.1,5.3,12.35)
Bodysize_mat = Bodysize %*% matrix(1,6,1) - matrix(1,1,6) %*% t(Bodysize)
# fisher marten coyote red_fox gray_fox bobcat in kg, male
Bodysize = matrix( c(4.75,0.85,12.5,8.1,5.3,12.35))
Bodysize_mat = Bodysize %*% matrix(1,6,1) - matrix(1,1,6) %*% t(Bodysize)
Bodysize %*% matrix(1,6,1)
?"%o%"
ones = matrix(1,6,1)
Bodysize_mat = Bodysize %*% matrix(1,1,6) - matrix(1,6,1) %*% t(Bodysize)
Bodysize_mat
Bodysize_mat = abs(Bodysize)
Zs = read.csv("./Data/PA_full.csv")
setwd("/media/yunyi/Academia/UW Lab jobs/2. ISING Occupancy model/8.Spp_network_reg")
Zs = read.csv("./Data/PA_full.csv")
Zs = read.csv("./Data/PA_all_full.csv")
Zs = Zs[,c("Fisher","Marten","Coyote","Fox_red","Fox_grey","Bobcat")]
Zs = Zs[,c("Fisher","Marten","Coyote","Fox_red","Fox_gray","Bobcat")]
Zs
dist_mainland = read.csv("./Data/dist_to_mainland.csv")
dist_mainland
dist_mainland = read.csv("./Data/dist_to_mainland.csv")$X0
dist_mainland
dist_mainland = (dist_mainland-min(dist_mainland))/(max(dist_mainland)-min(dist_mainland))
exp_mainland = exp(-2*dist_mainland)
envX = cbind(1,exp_mainland)
link_inner = Matrix(0,155,155,sparse = T)
require(Matrix)
link_inner = Matrix(0,155,155,sparse = T)
link_outer = link_inner
# fisher marten coyote red_fox gray_fox bobcat in kg, male
Bodysize = matrix( c(4.75,0.85,12.5,8.1,5.3,12.35))
Bodysize_mat = Bodysize %*% matrix(1,1,6) - matrix(1,6,1) %*% t(Bodysize)
Bodysize_mat = abs(Bodysize)
Zs = read.csv("./Data/PA_all_full.csv")
Zs = Zs[,c("Fisher","Marten","Coyote","Fox_red","Fox_gray","Bobcat")]
dist_mainland = read.csv("./Data/dist_to_mainland.csv")$X0
dist_mainland = (dist_mainland-min(dist_mainland))/(max(dist_mainland)-min(dist_mainland))
exp_mainland = exp(-2*dist_mainland)
envX = cbind(1,exp_mainland)
link_inner = Matrix(0,155,155,sparse = T)
link_outer = link_inner
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nspp = 6
spp_neig = Matrix(1,nspp,nspp,sparse = T)
diag(spp_neig) = 0
spp_design  = list(spp_neig,Bodysize_mat)
theta = list(beta_occu = runif(nspp*ncol(envX),-1,1),
beta_graph = c(.3,-.5),
eta_intra = rep(0,nspp),
eta_inter = rep(0,nspp))
vars_prop = list( beta_occu = 5e-4
,beta_graph = 5e-4 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z = matrix(Zs,ncol = 1), X = envX
, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
source("./R/misc.R")
source("./R/Main_Sampler.R")
source("./R/Simu_data_Sampling.R")
require(Matrix)
require(Rcpp)
kk = Net.fit.Murray.sampler(Z = matrix(Zs,ncol = 1), X = envX
, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
spp_design
# fisher marten coyote red_fox gray_fox bobcat in kg, male
Bodysize = matrix( c(4.75,0.85,12.5,8.1,5.3,12.35))
Bodysize_mat = Bodysize %*% matrix(1,1,6) - matrix(1,6,1) %*% t(Bodysize)
Bodysize %*% matrix(1,1,6)
# fisher marten coyote red_fox gray_fox bobcat in kg, male
Bodysize = matrix( c(4.75,0.85,12.5,8.1,5.3,12.35))
Bodysize_mat = Bodysize %*% matrix(1,1,6) - matrix(1,6,1) %*% t(Bodysize)
Bodysize_mat = abs(Bodysize_mat)
Zs = read.csv("./Data/PA_all_full.csv")
Zs = Zs[,c("Fisher","Marten","Coyote","Fox_red","Fox_gray","Bobcat")]
dist_mainland = read.csv("./Data/dist_to_mainland.csv")$X0
dist_mainland = (dist_mainland-min(dist_mainland))/(max(dist_mainland)-min(dist_mainland))
exp_mainland = exp(-2*dist_mainland)
envX = cbind(1,exp_mainland)
link_inner = Matrix(0,155,155,sparse = T)
link_outer = link_inner
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nspp = 6
spp_neig = Matrix(1,nspp,nspp,sparse = T)
diag(spp_neig) = 0
spp_design  = list(spp_neig,Bodysize_mat)
theta = list(beta_occu = runif(nspp*ncol(envX),-1,1),
beta_graph = c(.3,-.5),
eta_intra = rep(0,nspp),
eta_inter = rep(0,nspp))
vars_prop = list( beta_occu = 5e-4
,beta_graph = 5e-4 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z = matrix(Zs,ncol = 1), X = envX
, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = distM_mainland , link_mainland =  distM_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
kk = Net.fit.Murray.sampler(Z = matrix(Zs,ncol = 1), X = envX
, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = 0*dist_mainland , link_mainland = 0* dist_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
source("./R/misc.R")
source("./R/Main_Sampler.R")
source("./R/Simu_data_Sampling.R")
require(Matrix)
require(Rcpp)
# fisher marten coyote red_fox gray_fox bobcat in kg, male
Bodysize = matrix( c(4.75,0.85,12.5,8.1,5.3,12.35))
Bodysize_mat = Bodysize %*% matrix(1,1,6) - matrix(1,6,1) %*% t(Bodysize)
Bodysize_mat = abs(Bodysize_mat)
Bodysize_mat
t(Bodysize_mat)==Bodysize_mat
Zs = read.csv("./Data/PA_all_full.csv")
Zs = Zs[,c("Fisher","Marten","Coyote","Fox_red","Fox_gray","Bobcat")]
Z_vec = matrix(Zs,ncol = 1)
Z_vec = as.matrix(Zs,ncol = 1)
Z_vec = matrix( as.matrix( Zs),ncol = 1)
dist_mainland = read.csv("./Data/dist_to_mainland.csv")$X0
dist_mainland = (dist_mainland-min(dist_mainland))/(max(dist_mainland)-min(dist_mainland))
exp_mainland = exp(-2*dist_mainland)
envX = cbind(1,exp_mainland)
link_inner = Matrix(0,155,155,sparse = T)
link_outer = link_inner
link_map =
list(inter = 0*link_outer,
intra = 0*link_inner) # no spatial auto-correlation for now
nspp = 6
spp_neig = Matrix(1,nspp,nspp,sparse = T)
diag(spp_neig) = 0
spp_design  = list(spp_neig,Bodysize_mat)
theta = list(beta_occu = runif(nspp*ncol(envX),-1,1),
beta_graph = c(.3,-.5),
eta_intra = rep(0,nspp),
eta_inter = rep(0,nspp))
vars_prop = list( beta_occu = 5e-4
,beta_graph = 5e-4 # no extra det thing
,eta_intra = rep(1e-10,nspp)
,eta_inter = c(1e-10,1e-10))
para_prior = list( beta_occu = rep(1000,nspp * ncol(envX))
,beta_graph = rep(1000,2)
,eta_intra = rep(1000,nspp)
,eta_inter = rep(1000,nspp)
)
kk = Net.fit.Murray.sampler(Z = matrix(Zs,ncol = 1), X = envX
, spp_design = spp_design
, mcmc.iter = 5000, burn.in = 500
, vars_prop = vars_prop
, para_prior = para_prior
, uni_prior = F
, distM=link_map[[1]],link_map=link_map
, dist_mainland = 0*dist_mainland , link_mainland = 0* dist_mainland
, int_range_intra="nn",int_range_inter="nn"
, seed = 42
, ini = theta,thin.by = 1,report.by = 30,nIter = 50,method = "CFTP")
